<?php

/**
 * @file
 * Contains views_civimail.module.
 *
 * The views style plugin sets a theme of views_view_civimail.
 *
 * The module alters the suggestions for other templates when the style is in use.
 * Those templates are defined in views_civimail_theme
 *
 * It also provides tokens to civicrm for views displays using this plugin.
 */

/**
 * Implementation of hook_views_api().
 */
function views_civimail_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_help().
 */
function views_civimail_help($path, $arg) {
  switch ($path) {
    // Main module help for the views_civimail module.
    case 'admin/help#views_civimail':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('CiviMail views output display plugin') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 *
 * Theme implementations that strip out default drupal wrapping.
 *
 * views_container_civimail, used to alter the theme suggestions of the container.
 * views_civimail, used to alter the theme suggestions of the view itself.
 * views_view_civimail, used by the style plugin
 */
function views_civimail_theme() {
  $themes = [
 /*   'views_container_civimail' => [
      'template' => 'views-container-civimail',
      'base hook' => 'container',
      'path' => $template_path
    ], */
    'views_civimail' => [
      'template' => 'views-civimail',
      'base hook' => 'views_view',
    ],
    'views_view_civimail' => [
      // 'file' => 'views_civimail.theme.inc',
      'template' => 'views-view-civimail',
      'base hook' => 'views_view_civimail',
    ],
    'views_view_fields_civimail' => [
      'template' => 'views-view-fields-civimail',
      'base hook' => 'views_view_fields',
    ]
  ];
  foreach(['sidearticle','singlearticle','sidelist','imagearticle'] as $flavour) {
    $themes['views_view_fields_civimail_'.$flavour] = [
      'template' => 'views-view-fields-civimail-'.$flavour,
      'base hook' => 'views_view_fields',
    ];
  };
  return $themes;
}

/**
 * Implement hook_preprocess_views_view_fields
 *
 * If I'm working with a civimail style for my display,
 * and I've chosen a mosaico block option
 * then assign the selected fields to the specially named mosaico
 * fields.
 *
 * Also add in the theme suggestions
 */
function views_civimail_preprocess_views_view_fields(&$variables) {
  $view = $variables['view'];
  if (_views_civimail_is_civimail_style($view)) {
    $style = $view->style_plugin;
    $options = $style->options;
    $mosaico_block = $options['mosaico_block'];
    if ($mosaico_block) {
      foreach(['mosaico_title','mosaico_image','mosaico_longText','mosaico_link','mosaico_linkText'] as $key) {
        $value = $options[$key];
        if ($value && !empty($variables['fields'][$value])) {
          $variables['fields'][strtolower($key)] = $variables['fields'][$value];
        }
      }
    }
    switch($mosaico_block) {
      case 'sideArticleBlock':
        $variables['theme_hook_suggestions'][] = 'views_view_fields_civimail_sidearticle';
        break;
      case 'singleArticleBlock':
        $variables['theme_hook_suggestions'][] = 'views_view_fields_civimail_singlearticle';
        break;
      case 'sideListBlock':
        $variables['theme_hook_suggestions'][] = 'views_view_fields_civimail_sidelist';
        break;
      case 'imageArticleBlock':
        $variables['theme_hook_suggestions'][] = 'views_view_fields_civimail_imagearticle';
        break;
      default: 
        $variables['theme_hook_suggestions'][] = 'views_view_fields_civimail';
        break;
    }
  }
}

/**
 * Implements hook_preprocess_views_view().
 *
 * Add views "view" template suggestion when using the civimail style.
 *
 * @inheritdoc
 */
function views_civimail_preprocess_views_view(array &$variables) {
  if (_views_civimail_is_civimail_style($variables['view'])) {
    $variables['theme_hook_suggestions'][] = 'views_civimail';
  } 
} 

/**
 * Implements hook_theme_suggestions_HOOK() for container templates.
 *
 * Add a suggestion for a view container when the display style is 'civimail'
 
 TODO: equivalent for D7? 
 function views_civimail_theme_suggestions_container_alter(array &$suggestions, array $variables) {
  $element = $variables['element'];
  if (isset($element['#type']) && $element['#type'] == 'view') {
    if (!empty($element['#view'])) {
      if (_views_civimail_is_civimail_style($element['#view'])) {
        $suggestions[] = 'views_container_civimail';
      }
    }
  }
}
 */

/*
 * Get a list of views/displays using my civimail style
 */
function _views_civimail_displays() {
  static $displays;
  if (is_array($displays)) {
    return $displays;
  }
  $displays = [];
  // this should always be true, but let's avoid unexpected errors
  if (function_exists('views_get_enabled_views')) {
    $views_list = views_get_enabled_views();
    foreach($views_list as $name => $view) {
      foreach($view->display as $display_name => $display) {
        if (_views_civimail_display_is_civimail_style($display)) {
          $displays[$name.'__'.$display_name] = $view->human_name . ', ' . $display->display_title;
        } 
      }
    }
  }
  return $displays;
}

/*
 * Test a view object with display for whether it uses my "Civimail" style
 * @var $view 
 */
function _views_civimail_is_civimail_style($view) {
  if (!empty($view) && isset($view->style_plugin->plugin_name)) {
    return ('views_civimail' === $view->style_plugin->plugin_name) ? TRUE : FALSE;
  }
}

/*
 * Test a view object display for whether it uses my "Civimail" style
 * @var $view 
 */
function _views_civimail_display_is_civimail_style($views_display) {
  if (!empty($views_display) && isset($views_display->display_options['style_plugin'])) {
    return ('views_civimail' === $views_display->display_options['style_plugin']) ? TRUE : FALSE;
  }
}


/*
 * Get the output to be used in civimail for a view display
 * @var string $key
 * Where key is {view name}__{display name}
 * TODO: see if it's worth statically saving the output?
 */
function _views_civimail_view_output($key) {
  list($view_name,$display) = explode('__', $key, 2);
  $output = views_embed_view($view_name, $display);
  $output = trim($output);
  // now convert src and href links to absolute links
  // Fortunately, we can use a civicrm constant that we know points to the base url
  $base_url = rtrim(CIVICRM_UF_BASEURL,"/");
  // I'm not sure why this first one is necessary, perhaps because it's running via cron
  $output = str_replace('=":/usr/local/bin/','="'.$base_url.'/', $output);
  $output = str_replace(' src="/',' src="'.$base_url.'/', $output);
  $output = str_replace(' href="/',' href="'.$base_url.'/', $output);
  return $output;
}

function views_civimail_civicrm_container($container) {
  $container->addResource(new \Symfony\Component\Config\Resource\FileResource(__FILE__));
  $container->findDefinition('dispatcher')->addMethodCall('addListener',
    ['civi.token.list', 'views_civimail_civicrm_register_tokens']
  );
  $container->findDefinition('dispatcher')->addMethodCall('addListener',
    ['civi.token.eval', 'views_civimail_civicrm_evaluate_tokens']
  );
}

function views_civimail_civicrm_register_tokens(\Civi\Token\Event\TokenRegisterEvent $e) {
  $displays = _views_civimail_displays();
  $e_views = $e->entity('views');
  foreach($displays as $name => $label) {
    $e_views->register($name,$label);
  }
}

function views_civimail_civicrm_evaluate_tokens(\Civi\Token\Event\TokenValueEvent $e) {
  $tokens = $e->getTokenProcessor()->getMessageTokens();
  if (!empty($tokens['views'])) {
    // ensure I've loaded all my Drupal modules (like views!)
    // \Drupal::getContainer()->get('module_handler')->loadAll();
    $display_filter = _views_civimail_displays();
    foreach($tokens['views'] as $key) {
      if (!empty($display_filter[$key])) {
        $output = _views_civimail_view_output($key);
        // convert links to trackable links
        $matched = preg_match_all('/ href="([^#].+?)"/', $output, $matches);
        // CRM_Core_Error::debug('matched',$matched, 1, 1);
        $trackable_urls = array();
        // TODO: can job_id be fetched from some context value?
        if (!empty($job_id) && !empty($output) && $matched) {
          // job details to get mailing_id
          $job = civicrm_api3('MailingJob', 'getsingle', array('id' => $job_id));
          // $result = $xml->xpath("//@href");
          $list = array();
          // while(list( , $url) = each($result)) {
          foreach($matches[1] as $url) {
            $list[$url] = 1;
          }
          $trackable_urls = array_keys($list);
        }
        else {
          // watchdog('view values', "$view_name  $display_name $job_id ".$output);
        }
        foreach ($e->getRows() as $row) {
          /** @var TokenRow $row */
          $row->format('text/html');
          $row->tokens('views', $key, $output);
        }
        /*
        foreach ($cids as $cid) {
          if (count($trackable_urls)) {
            // get event_queue_id
            $queue = civicrm_api3('MailingEventQueue', 'getsingle', array('job_id' => $job_id, 'contact_id' => $cid));
            $replace = array();
            $search = array();
            foreach($trackable_urls as $url) {
              $search[] = '"'.$url.'"';
              $replace[] = '"'.CRM_Mailing_BAO_TrackableURL::getTrackerURL($url, $job['mailing_id'], $queue['id']).'"';
            }
            $values[$cid]['views.'.$key] = str_replace($search,$replace,$output);
          }
          else {
            $values[$cid]['views.'.$key] = $output;
          }
        } */
      }
    }
  }
}

/*
 * Provide tokens for civicrm
 */
function views_civimail_civicrm_tokens(&$tokens) {
  // get all my views/displays that are using the Civimail style
  $displays = _views_civimail_displays();
  $token_name = 'views';
  $views_tokens = [];
  foreach($displays as $name => $label) {
    $views_tokens[$token_name.'.'.$name] = $label;
  }
  $tokens[$token_name] = $views_tokens;
}

function views_civimail_civicrm_tokenValues(&$values, $cids, $job_id = null, $tokens = array(), $context = null) {
  if (!empty($tokens['views'])) {
    // for security, only allow my "Civimail style" view/displays
    $display_filter = _views_civimail_displays();
    foreach(array_keys($tokens['views']) as $key) {
      if (!empty($display_filter[$key])) {
        $output = _views_civimail_view_output($key);
        // convert links to trackable links
        $matched = preg_match_all('/ href="([^#].+?)"/', $output, $matches);
        // CRM_Core_Error::debug('matched',$matched, 1, 1);
        $trackable_urls = array();
        if (!empty($job_id) && !empty($output) && $matched) {
          // job details to get mailing_id
          $job = civicrm_api3('MailingJob', 'getsingle', array('id' => $job_id));
          // $result = $xml->xpath("//@href");
          $list = array();
          // while(list( , $url) = each($result)) {
          foreach($matches[1] as $url) {
            $list[$url] = 1;
          }
          $trackable_urls = array_keys($list);
        }
        else {
          // watchdog('view values', "$view_name  $display_name $job_id ".$output);
        }
        foreach ($cids as $cid) {
          if (count($trackable_urls)) {
            // get event_queue_id
            $queue = civicrm_api3('MailingEventQueue', 'getsingle', array('job_id' => $job_id, 'contact_id' => $cid));
            $replace = array();
            $search = array();
            foreach($trackable_urls as $url) {
              $search[] = '"'.$url.'"';
              $replace[] = '"'.CRM_Mailing_BAO_TrackableURL::getTrackerURL($url, $job['mailing_id'], $queue['id']).'"';
            }
            $values[$cid]['views.'.$key] = str_replace($search,$replace,$output);
          }
          else {
            $values[$cid]['views.'.$key] = $output;
          }
        }
      }
    }
  }
}
